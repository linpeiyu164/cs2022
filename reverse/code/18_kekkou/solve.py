# Run: python3 solve.py

encflag = b'\x41\x92\x41\x47\xEF\xBC\x65\x8B\xF2\x6F\x75\x5F\x6D\x75\xDF\x9A\x5F\xB3\x8F\x61\x89\x31\x61\xF5\x3F\x5D\x61\x69\x8F\x21\x9D\x96\xA7\x61\x5C\xEC\x03\x5F\x70\x3C\xC0\xDC\x79\x56\x6E\x25\x6F\x5F\xBD\xDD\x72\xFF\x73\x34\x69\xB5\x6D\x58\x5F\x0C\x49\x40\x72\xC8\x5D'
key = b'\x75\x1C\xD7\x87\x83\x40\x87\x98\x8A\x39\x30\x93\xA6\xE6\x21\x68\x44\x6F\x89\x8D\x3E\xB9\x63\xAF\x1F\x6B\xF6\x86\x31\x37\x3D\x46\x59\x0C\x13\x23\xDC\x16\xBD\x38\xC1\xEE\xB1\xFB\xDF\x8D\x2C\x85\x76\x0A\x0A\x68\xCB\xD9\xA5\x44\xF5\x6B\x0E\x82\xF5\xB8\xB5\x46\xE3\x69\x30\x8E\x34\xD0\x83\x2F\xD5\xFD\x66\xCA\x6B\x45\x41\x70\xFE\xA8\x65\xD7\x4B\x32\xEA\xA7\xBD\xD0\x56\xF0\x94\x4C\xDF\xEE\x56\x69\xDE\x61\x3C\x70\xB9\xD6\xF3\xD6\xF7\xB3\x0F\xF0\x99\x6B\x1B\xB7\xB1\xB5\x15\x1B\x23\xB0\x62\x59\xE3\x64\x82\x2F\x29\x20\x01\xF4\xC7\x28\x29\x4D\xDE\xAC\x3A\xD8\x30\x29\x04\x23\x8C\xD6\x0C\x1B\x4A\x5E\x79\xF4\xE5\x72\x75\xFC\xEF\xB1\x9F\xD5\x5C\xB4\x19\xB4\xE9\xD4\x51\x51\xC1\x16\xEF\x47\x78\xFF\x68\x29\x0D\xE7\x27\xFB\x60\x39\x4E\xB4\x9F\xF3\x86\x2E\x71\x75\xC9\xC6\x27\x2D\x0B\xCB\xE9\x00\x00'
encflag = bytearray(encflag)[::-1]
key = bytearray(key)

idx = 0
size = len(encflag)
xor = [0 for _ in range(size)]
i = 0

while 1:
    forward = key[3*i] & 0x01
    steps = key[3*i+1]
    if steps == 0:
        break
    if forward:
        idx = (idx - steps) % size
    else:
        idx = (idx + steps) % size
    xor[idx] ^= key[3*i+2]
    i += 1

k = 64
flag = []
print("starts at: ", k)
for j in range(size):
    pos = (k + j) % size
    c = encflag[pos] ^ xor[j]
    flag.append(c)
flag = flag[::-1]
print(bytes(flag))

# output : LAG{kekkou_muri_jya_nai?nai_ai_kazoe_te_cyotto_kurushi_ku_na_ru}F
# flag : FLAG{kekkou_muri_jya_nai?nai_ai_kazoe_te_cyotto_kurushi_ku_na_ru}